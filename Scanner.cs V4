// Scanner -- The lexical analyzer for the Scheme printer and interpreter

using System;
using System.IO;
using Tokens;

namespace Parse
{
    public class Scanner
    {
        private TextReader In;

        // maximum length of strings and identifier
        private const int BUFSIZE = 1000;
        private char[] buf = new char[BUFSIZE];

        public Scanner(TextReader i) { In = i; }
  
        // TODO: Add any other methods you need

        public Token getNextToken()
        {
            int ch;
            int tmp;
            char ident;
            int count = 0;
            char strIdent;

            try
            {
                // It would be more efficient if we'd maintain our own
                // input buffer and read characters out of that
                // buffer, but reading individual characters from the
                // input stream is easier.
                
                ch = In.Read();
   
                // TODO: skip white space and comments  **starting
                
               // if( String.IsWhiteSpace((char)ch) == true )   //FIXME: need to know what nextline is in scheme
                if( ch == '\n' || ch == '\t' || ch == '\r' || ch == '\v')
                    ch = In.Read();
                   
                 if (ch == ';')                          //FIXME: need to know that here too
                 {
                    while (ch != '\n' )
                    {
                       ch = In.Read();                  
                    } 
                 }

                if (ch == -1)
                    return null;
        
                // Special characters
                else if (ch == ' \' ')
                    return new Token(TokenType.QUOTE);
                else if (ch == '(')
                    return new Token(TokenType.LPAREN);
                else if (ch == ')')
                    return new Token(TokenType.RPAREN);
                else if (ch == '.')
                    // We ignore the special identifier `...'.
                    return new Token(TokenType.DOT);
                
                // Boolean constants
                else if (ch == '#')
                {
                    ch = In.Read();

                    if (ch == 't')
                        return new Token(TokenType.TRUE);
                    else if (ch == 'f')
                        return new Token(TokenType.FALSE);
                    else if (ch == -1)
                    {
                        Console.Error.WriteLine("Unexpected EOF following #");
                        return null;
                    }
                    else
                    {
                        Console.Error.WriteLine("Illegal character '" +
                                                (char)ch + "' following #");
                        return getNextToken();
                    }
                }

                // String constants
                else if (ch == '"')
                {
                    int strStart = count;
                    do
                    {
                        ch = In.Read();
                        buf[count] = (char)ch;
                        count++;
                        
                    } while (ch != '"');
                    int strEnd = count;
                    // TODO: scan a string into the buffer variable buf    ****started
                    return new StringToken(new String(buf, strStart, strEnd));
                }

    
                // Integer constants
                else if (ch >= '0' && ch <= '9')
                {
                    int i = ch - '0';
                    tmp = In.Peek();
                    
                    while( tmp >= '0' && tmp <= '9')                //FIXME: need to test
                    {
                        ch = In.Read();
                        int j = ch - '0';
                        i = (i * 10) + j;
                        tmp = In.Peek();
                    }
                    // TODO: scan the number and convert it to an integer

                    // make sure that the character following the integer
                    // is not removed from the input stream
                    return new IntToken(i);
                }
        
                // Identifiers
                else if ( (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || ch == '!' || ch =='$' || ch == '%' || ch == '*' || ch == '+' || ch ==
                '-' || ch == '.' || ch == '/' || ch == ':' || ch == '<' || ch == '=' || ch == '>' || ch == '?'|| ch == '@' || ch == '^' || ch == '_' || ch == '~') 
                {                       
                                        // or ch is some other valid first character
                                        // for an identifier
                                        //ACII lambda symbol is 955
                    buf[count] = ch;
                    count++;      
                    ident = (char)ch;
                    tmp = In.Peek();
                    while( (tmp >= 'A' && tmp <= 'Z') || (tmp >= 'a' && tmp <= 'z') || tmp == '!' || tmp =='$' || tmp == '%' || tmp == '*' || tmp == '+' || tmp ==
                '-' || tmp == '.' || tmp == '/' || tmp == ':' || tmp == '<' || tmp == '=' || tmp == '>' || tmp == '?'|| tmp == '@' || tmp == '^' || tmp == '_' || tmp == '~') 
                    {
                        tmp = In.Read();
                        //ident += (char)tmp;
                        buf[count] = tmp;
                        count++;
                        strIdent = ident + (char)tmp;
                        tmp = In.Peek();
                    }
                    
                    //buf[count] = strIdent;
                    
                    // TODO: scan an identifier into the buffer    ******** make sure char works with the += cocantonation

                    // make sure that the character following the integer
                    // is not removed from the input stream

                    return new IdentToken(new String(buf, 0, 0));
                }
    
                // Illegal character
                else
                {
                    Console.Error.WriteLine("Illegal input character "
                                            + (char)ch + '\'');
                    return getNextToken();
                }
            }
            catch (IOException e)
            {
                Console.Error.WriteLine("IOException: " + e.Message);
                return null;
            }
        }
    }

}


