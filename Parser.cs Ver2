// Parser -- the parser for the Scheme printer and interpreter
//
// Defines
//
//   class Parser;
//
// Parses the language
//
//   exp  ->  ( rest
//         |  #f
//         |  #t
//         |  ' exp
//         |  integer_constant
//         |  string_constant
//         |  identifier
//    rest -> )
//         |  exp+ [. exp] )
//
// and builds a parse tree.  Lists of the form (rest) are further
// `parsed' into regular lists and special forms in the constructor
// for the parse tree node class Cons.  See Cons.parseList() for
// more information.
//
// The parser is implemented as an LL(0) recursive descent parser.
// I.e., parseExp() expects that the first token of an exp has not
// been read yet.  If parseRest() reads the first token of an exp
// before calling parseExp(), that token must be put back so that
// it can be reread by parseExp() or an alternative version of
// parseExp() must be called.
//
// If EOF is reached (i.e., if the scanner returns a NULL) token,
// the parser returns a NULL tree.  In case of a parse error, the
// parser discards the offending token (which probably was a DOT
// or an RPAREN) and attempts to continue parsing with the next token.

using System;
using Tokens;
using Tree;

namespace Parse
{
    public class Parser {
	
        private Scanner scanner;

        public Parser(Scanner s) { scanner = s; }
  
        public Node parseExp()
        {
            Token nt = scanner.getNextToken();
            TokenType ty = nt.getType();
            if (nt.isNull())
            {
                return null;
            }
            else if (ty == TokenType.LPAREN)
            {
                Console.WriteLine("Token : " + nt + " ");
                cons(parseRest(), parsExp());
            }
            else if (nt == false)
            {
                Console.WriteLine("Token : " + nt + " ");
                cons(false, parsExp());
            }
            else if (nt == true)
            {
                Console.WriteLine("Token : " + nt + " ");
                cons(true, parsExp());
            }
            else if (ty == TokenType.QUOTE)
            {

            }
            //getnext token
            //Token tok = scanner.getNextToken();
            //TokenType tt = tok.getType();

            //  if (tt == TokenType.LPAREN){
            //      cons(LPAREN, parseExp());
            //}
            //  else if (tt == TokenType.TRUE){
            //
            //}
            //  else if (tt == TokenType.FALSE){
            //
            //}
            //  else if (tt == TokenType.QUOTE){
            //      cons(cons(QUOTE, parseExp()), parseExp());
            //}
            //  else if (tt == TokenType.STRING){
            //      cons(tok.getStringVal(), parsExp());
            //      
            //}
            //  else if (tt == TokenType.INT){
            //      tok.getIntVal();
            //}
            //  else if (tt == TokenType.IDENT){
            //      tok.getName();
            //}
            //  else {
            //      Console.Error.WriteLine("ERROR: Something else got through: " + tt;
            //}
            //
            //
            // TODO: write code for parsing an exp
            //
            //
            return null;
        }
  
        protected Node parseRest()
        {
            bool isdot = false;
            //pull token
            if (tt == TokenType.RPAREN)
            {

            }
            // TODO: write code for parsing a rest
            //if (tt == TokenType.RPAREN){
            //  return (RPAREN);
            //}
            //else{
            //   parseExp();
            // if (tt == TokenType.DOT){
            //      
            //     }
            // else {
            //
            //      }
            //}
            //
            return null;
        }

        // TODO: Add any additional methods you might need.
                                                                                //TEST THIS!!!!!!!!!!!!!!!   TESTME
        public Node loadTree(Scanner s){
            Token tn = s.getNextToken(s):
            if (tn.isNull()){
                return null;
            }
            else if (tn == TokenType.LPAREN)
            {
                cons(loadTree(s),loadTree(s));
            }
            else
            {
                cons(tn, loadTree(s));
            }
        }






































            getNextToken from Scanner

        public Node parsExp(token t){
            if t == LPAREN
            {
                call parseRest()
            }
            else if t == #f{
                cons(false, parseExp(getNextToken-> t))
            }
            else if t == #t{
                cons(true, parseExp(getNextToken-> t))
            }
            else if t == QUOTE{
                cons(cons(QUOTE, parsExp(getNextToken-> t)), parseExp(getNextToken-> t))
            }
            else if token == INT{
                cons(token, parseExp(getNextToken-> t))
            }
            else if token == STRING{
                cons(token, parseExp(getNextToken-> t))         ????is it one token, or does it need more? Fixme
            }
            else if token == IDENT{
                cons(token, parseExp(getNextToken-> t))
            }
            else 
            {
                return "NIL"
            }
        }

        public Node parseRest(){
            get next token -> t1
            if token == RPAREN{
                return RPAREN
            }
            else if token isNull{
                return "Nil"
            }
            else {
                get next token -> tdot
                if tdot == DOT{
                    get next token -> t2
                    else if t2 == RPAREN{
                            ERROR
                        }
                        else if t2.isNull(){
                            return "NIL"
                        }
                        else {
                            cons(parsExpO(t1, t2), parseExp(t2))    
                        }
                    }
                }
                else {
                    cons(t1, parseExp(tdot))
                }
            }
        }
        
        parseExpO(token t1, token t2){
            if t1 == LPAREN
            {
                call parseRestO(t2)
            }
            else if t1 == #f{
                cons(false, parseExp(t2))
            }
            else if t1 == #t{
                cons(true, parseExp(t2))
            }
            else if t1 == QUOTE{
                cons(cons(QUOTE, parsExp(t2)), parseExp(getnexttoken -> t))
            }
            else if token == INT{
                cons(token, parseExp(t2))
            }
            else if token == STRING{
                cons(token, parseExp(t2))         ????is it one token, or does it need more? Fixme
            }
            else if token == IDENT{
                cons(token, parseExp(t2))
            }
            else 
            {
                return "NIL"
            }
        }
        public Node parseRest0(token t){
            if t == RPAREN{
                return RPAREN
            }
            else if t isNull{
                return "Nil"
            }
            else {
                get next token -> tdot
                if tdot == DOT{
                    get next token -> t2
                    else if t2 == RPAREN{
                            ERROR
                        }
                        else if t2.isNull(){
                            return "NIL"
                        }
                        else {
                            cons(parsExpO(t1, t2), parseExp(t2))    
                        }
                    }
                }
                else {
                    cons(t1, parseExp(tdot))
                }
            }
        }
        }
    }
}

